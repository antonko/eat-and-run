import logging

from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message

from app.config import settings
from app.food_analyzer import FoodAnalyzer

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Initialize bot and dispatcher
# session = AiohttpSession()
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# Initialize food analyzer
food_analyzer = FoodAnalyzer()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """Handle the /start command."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –µ–¥—ã. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞, "
        "–∏ —è –æ–ø—Ä–µ–¥–µ–ª—é, —á—Ç–æ —ç—Ç–æ –∑–∞ –±–ª—é–¥–æ, –µ–≥–æ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –∏ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å (–ö–ë–ñ–£)."
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """Handle the /help command."""
    await message.answer(
        "–Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–¥—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å:\n"
        "- –ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞\n"
        "- –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å\n"
        "- –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å\n"
        "- –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞!"
    )


@dp.message(lambda message: message.photo)
async def handle_photo(message: Message):
    """Handle incoming photos."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å
    if not message.photo:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return

    # Get the largest photo (best quality)
    photo = message.photo[-1]

    try:
        # Send a processing message
        processing_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")

        # Download the photo
        file_info = await bot.get_file(photo.file_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ file_path
        if not file_info or not file_info.file_path:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        downloaded_file = await bot.download_file(file_info.file_path)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not downloaded_file:
            await message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return

        image_data = downloaded_file.read()

        # Analyze the image
        analysis_result = await food_analyzer.analyze_image(image_data)

        # Format and send the response
        if analysis_result.get("is_food", False):
            response_text = (
                f"‚úÖ –ë–ª—é–¥–æ: {analysis_result['name']}\n"
                f"‚öñÔ∏è –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å: {analysis_result['weight_g']} –≥\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {analysis_result['calories']} –∫–∫–∞–ª\n\n"
                f"üìä –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å:\n"
                f"ü•© –ë–µ–ª–∫–∏: {analysis_result['macros']['protein_g']} –≥\n"
                f"üßà –ñ–∏—Ä—ã: {analysis_result['macros']['fat_g']} –≥\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {analysis_result['macros']['carbs_g']} –≥"
            )
        else:
            response_text = "‚ö†Ô∏è " + analysis_result.get(
                "message", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."
            )

        # Delete the processing message and send the result
        try:
            await bot.delete_message(
                chat_id=message.chat.id, message_id=processing_msg.message_id
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

        await message.answer(response_text)

    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


@dp.message()
async def handle_message(message: Message):
    """Handle all other messages."""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. "
        "–¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
    )


async def start_bot():
    """Start the bot."""
    try:
        logger.info("Starting the bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
    finally:
        logger.info("Bot stopped.")
        await bot.session.close()
